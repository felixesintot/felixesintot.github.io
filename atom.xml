<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>felixesintot&#39;s blog</title>
  
  
  <link href="https://www.felixesintot.top/atom.xml" rel="self"/>
  
  <link href="https://www.felixesintot.top/"/>
  <updated>2023-01-10T01:54:08.267Z</updated>
  <id>https://www.felixesintot.top/</id>
  
  <author>
    <name>felixesintot</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网络流模板</title>
    <link href="https://www.felixesintot.top/2023/01/01/wang-luo-liu-mo-ban/"/>
    <id>https://www.felixesintot.top/2023/01/01/wang-luo-liu-mo-ban/</id>
    <published>2023-01-01T15:29:32.000Z</published>
    <updated>2023-01-10T01:54:08.267Z</updated>
    
    <content type="html"><![CDATA[<div class="note flat info flat"><p>存个模板,放个<a href="https://oi.wiki/graph/flow/">链接</a>.</p></div><h1 id="最大流">最大流</h1><h2 id="EK">EK</h2><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-type">bool</span> bl[maxn];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">tmppre</span><br>&#123;<br><span class="hljs-type">int</span> point,edge;<br>&#125;pre[maxn];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>queue&lt;<span class="hljs-type">int</span>&gt;que;<br><span class="hljs-built_in">memset</span>(bl,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> bl);<br>que.<span class="hljs-built_in">push</span>(s);<br>bl[s]=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())<br>&#123;<br><span class="hljs-type">int</span> dc=que.<span class="hljs-built_in">front</span>();<br>que.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-type">int</span> i=head[dc];i;i=edge[i].next)<br><span class="hljs-keyword">if</span>(!bl[edge[i].to]&amp;&amp;edge[i].w)<br>&#123;<br>pre[edge[i].to].point=dc;<br>pre[edge[i].to].edge=i;<br><span class="hljs-keyword">if</span>(!(edge[i].to^t))<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>que.<span class="hljs-built_in">push</span>((edge[i].to));<br>bl[edge[i].to]=<span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ek</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> minn;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">bfs</span>())<br>&#123;<br>minn=<span class="hljs-number">0x7f7f7f7f</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-type">int</span> i=t;i^s;i=pre[i].point)<br>&#123;<br>minn=(minn&gt;edge[pre[i].edge].w)?edge[pre[i].edge].w:minn;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-type">int</span> i=t;i^s;i=pre[i].point)<br>&#123;<br>edge[pre[i].edge].w-=minn;<br>edge[pre[i].edge^<span class="hljs-number">1</span>].w+=minn;<br>&#125;<br>ans+=minn;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="DINIC">DINIC</h2><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-type">bool</span> bl[maxn];<span class="hljs-type">int</span> cur[maxn],dis[maxn];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">memset</span>(bl,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> bl);<br>queue&lt;<span class="hljs-type">int</span>&gt;que;<br>bl[s]=<span class="hljs-literal">true</span>;<br>dis[s]=<span class="hljs-number">0</span>;<br>que.<span class="hljs-built_in">emplace</span>(s);<br><span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())<br>&#123;<br><span class="hljs-type">int</span> dc=que.<span class="hljs-built_in">front</span>();<br>que.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-type">int</span> j=head[dc];j;j=edge[j].next)<br><span class="hljs-keyword">if</span>(!bl[edge[j].to]&amp;&amp;edge[j].w)<br>&#123;<br>dis[edge[j].to]=dis[dc]+<span class="hljs-number">1</span>;<br>bl[edge[j].to]=<span class="hljs-literal">true</span>;<br>que.<span class="hljs-built_in">emplace</span>(edge[j].to);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> bl[t];<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> dc,ll flow)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(dc==t||flow==<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> flow;<br>ll dcflow=<span class="hljs-number">0</span>,f;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-type">int</span> j=cur[dc];j;j=edge[j].next)<br>&#123;<br>cur[dc]=j;<br><span class="hljs-keyword">if</span>(dis[edge[j].to]==dis[dc]+<span class="hljs-number">1</span>&amp;&amp;(f=<span class="hljs-built_in">dfs</span>(edge[j].to,<span class="hljs-built_in">min</span>((ll)edge[j].w,flow))))<span class="hljs-comment">//水太少，管子太细，流量都不会多hhh</span><br>&#123;<br>dcflow+=f;<br>flow-=f;<br>edge[j].w-=f;<br>edge[j^<span class="hljs-number">1</span>].w+=f;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> dcflow;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">dinic</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>ll ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">bfs</span>())<br>&#123;<br><span class="hljs-built_in">fru</span>(i,<span class="hljs-number">1</span>,n)cur[i]=head[i];<br>ans+=<span class="hljs-built_in">dfs</span>(s,LLONG_MAX);<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note flat info flat&quot;&gt;&lt;p&gt;存个模板,放个&lt;a href=&quot;https://oi.wiki/graph/flow/&quot;&gt;链接&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;最大流&quot;&gt;最大流&lt;/h1&gt;
&lt;h2 id=&quot;EK&quot;&gt;EK&lt;/h2</summary>
      
    
    
    
    <category term="信息学" scheme="https://www.felixesintot.top/categories/%E4%BF%A1%E6%81%AF%E5%AD%A6/"/>
    
    <category term="笔记" scheme="https://www.felixesintot.top/categories/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="图论" scheme="https://www.felixesintot.top/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="网络流" scheme="https://www.felixesintot.top/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>洛谷P3403_跳楼机</title>
    <link href="https://www.felixesintot.top/2022/12/21/luo-gu-p3403-tiao-lou-ji/"/>
    <id>https://www.felixesintot.top/2022/12/21/luo-gu-p3403-tiao-lou-ji/</id>
    <published>2022-12-21T11:25:28.000Z</published>
    <updated>2023-01-09T06:54:08.952Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3403">题目链接</a></p><h1 id="大体思路">大体思路</h1><p>把<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>作为起始点，将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo stretchy="false">(</mo><mn>0</mn><mo>⩽</mo><mi>i</mi><mo>⩽</mo><mi>x</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">i(0\leqslant i\leqslant x-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">i</span><span class="mopen">(</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7962em;vertical-align:-0.1367em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>i</mi><mo>+</mo><mi>y</mi><mo stretchy="false">)</mo><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>x</mi></mrow><annotation encoding="application/x-tex">(i+y)\mod x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span></span></span></span>连权值为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>的边以及与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>i</mi><mo>+</mo><mi>z</mi><mo stretchy="false">)</mo><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>x</mi></mrow><annotation encoding="application/x-tex">(i+z)\mod x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span></span></span></span>连权值为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi></mrow><annotation encoding="application/x-tex">z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span>的边，跑一遍最短路，就会发现到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>的最短路（记作<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>i</mi><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">dis_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>）会表示<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow></mrow><annotation encoding="application/x-tex">%x==i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"></span></span>的楼中可以走到的最低的楼的层数。</p><h1 id="坑点">坑点</h1><ul class="lvl-0"><li class="lvl-2">全部要开<code>long long</code></li><li class="lvl-2"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>时,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>x</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\mod x=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;"></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>的最低楼层，所以要把<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>向<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>建边（其他时候都不用）。</li></ul><h1 id="代码">代码</h1><blockquote><p>个人码风问题严重</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iomanip&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;ctime&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;climits&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fru(i,j,k) for(register int i=j;i&lt;=k;i++)<span class="hljs-comment">//for_register_up</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> frd(i,j,k) for(register int i=j;i&gt;=k;i--)<span class="hljs-comment">//for_register_down</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pc(charx) putchar(charx)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> finfout(x) freopen(#x<span class="hljs-string">&quot;.in&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,stdin);freopen(#x<span class="hljs-string">&quot;.out&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>,stdout);</span><br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">namespace</span> usegetin&#123;<br><span class="hljs-type">char</span> c=<span class="hljs-string">&#x27; &#x27;</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">in</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>ll x=<span class="hljs-number">0</span>;<span class="hljs-type">bool</span> w=<span class="hljs-literal">false</span>;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c))<br>&#123;<br>w|=c==<span class="hljs-string">&#x27;-&#x27;</span>;<br>c=<span class="hljs-built_in">getchar</span>();<br>&#125;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c))<br>&#123;<br>x=(x&lt;&lt;<span class="hljs-number">1</span>)+(x&lt;&lt;<span class="hljs-number">3</span>)+(c^<span class="hljs-number">48</span>);<br>c=<span class="hljs-built_in">getchar</span>();<br>&#125;<br><span class="hljs-keyword">return</span> w?-x:x;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> ty&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">out</span><span class="hljs-params">(ty x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">0</span>)<span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>),x=-x;<br><span class="hljs-keyword">if</span>(x&gt;<span class="hljs-number">9</span>)<span class="hljs-built_in">out</span>(x/<span class="hljs-number">10</span>);<br><span class="hljs-built_in">putchar</span>(x%<span class="hljs-number">10</span>+<span class="hljs-number">48</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">using</span> usegetin::in;<span class="hljs-keyword">using</span> usegetin::out;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//正文开始</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn=<span class="hljs-number">100012</span>,maxm=<span class="hljs-number">100012</span>;<br>ll h,x,y,z,ans;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">edg</span><br>&#123;<br><span class="hljs-type">int</span> next,to,w;<br>&#125;edge[maxm&lt;&lt;<span class="hljs-number">4</span>];<br><span class="hljs-type">int</span> head[maxn],cnt=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">getin</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>edge[cnt]=(edg)&#123;head[a],b,w&#125;;<br>head[a]=cnt++;<br>&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br><span class="hljs-type">int</span> no;ll num;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(node y)<span class="hljs-type">const</span><br>&#123;<br><span class="hljs-keyword">return</span> num&gt;y.num;<br>&#125;<br>&#125;;<br>ll dis[maxn];<br><span class="hljs-type">bool</span> bl[maxn];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(s&gt;=x)<br>&#123;<br><span class="hljs-built_in">getin</span>(s,(s+y)%x,<span class="hljs-number">0</span>);<br><span class="hljs-built_in">getin</span>(s,(s+z)%x,<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-built_in">memset</span>(dis,<span class="hljs-number">0x3f</span>,<span class="hljs-keyword">sizeof</span> dis);<br><span class="hljs-built_in">memset</span>(bl,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> bl);<br>priority_queue&lt;node&gt;que;<br>dis[s]=<span class="hljs-number">1</span>;<br>que.<span class="hljs-built_in">emplace</span>((node)&#123;s,<span class="hljs-number">1</span>&#125;);<br><span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())<br>&#123;<br><span class="hljs-type">int</span> dc=que.<span class="hljs-built_in">top</span>().no;<br>que.<span class="hljs-built_in">pop</span>();<br><span class="hljs-comment">//cout&lt;&lt;dc&lt;&lt;endl;</span><br><span class="hljs-keyword">if</span>(bl[dc])<span class="hljs-keyword">continue</span>;<br>bl[dc]=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-type">int</span> j=head[dc];j;j=edge[j].next)<br><span class="hljs-keyword">if</span>(dis[edge[j].to]&gt;edge[j].w+dis[dc])<br>&#123;<br>dis[edge[j].to]=edge[j].w+dis[dc];<br><span class="hljs-keyword">if</span>(!bl[edge[j].to])que.<span class="hljs-built_in">emplace</span>((node)&#123;edge[j].to,dis[edge[j].to]&#125;);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>h=<span class="hljs-built_in">in</span>();x=<span class="hljs-built_in">in</span>();y=<span class="hljs-built_in">in</span>();z=<span class="hljs-built_in">in</span>();<br><span class="hljs-built_in">fru</span>(i,<span class="hljs-number">0</span>,x<span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-built_in">getin</span>(i,(i+y)%x,y);<br><span class="hljs-built_in">getin</span>(i,(i+z)%x,z);<br>&#125;<br><span class="hljs-built_in">dijkstra</span>(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">fru</span>(i,<span class="hljs-number">0</span>,x<span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(h&gt;=dis[i])ans+=(h-dis[i])/x+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-built_in">out</span>(ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P3403&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;大体思路&quot;&gt;大体思路&lt;/h1&gt;
&lt;p&gt;把&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;</summary>
      
    
    
    
    <category term="信息学" scheme="https://www.felixesintot.top/categories/%E4%BF%A1%E6%81%AF%E5%AD%A6/"/>
    
    <category term="题解" scheme="https://www.felixesintot.top/categories/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="图论" scheme="https://www.felixesintot.top/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="最短路" scheme="https://www.felixesintot.top/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>图论基础</title>
    <link href="https://www.felixesintot.top/2022/12/15/tu-lun-ji-chu/"/>
    <id>https://www.felixesintot.top/2022/12/15/tu-lun-ji-chu/</id>
    <published>2022-12-15T13:59:38.000Z</published>
    <updated>2023-01-11T15:36:01.878Z</updated>
    
    <content type="html"><![CDATA[<div class="note flat info flat"><p>这里放了最基础的图论内容<br>在本文中<code>maxn</code>为最大点数，<code>maxm</code>为最大边数.</p></div><h1 id="链式前向星">链式前向星</h1><p>邻接矩阵太sb了，不放了。其实在数据较小<strong>或考试时间不够</strong>时可以用<code>vector</code>，支持<code>auto</code>，特别方便。</p><div class="note flat info flat"><p>以下代码存图所用链式前向星皆用这个模板</p></div><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">edg</span><br>&#123;<br><span class="hljs-type">int</span> next,to,w;<br>&#125;edge[maxm];<span class="hljs-comment">//无向图是这里要&lt;&lt;1</span><br><span class="hljs-type">int</span> head[maxn],cnt=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">getin</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> w)</span><span class="hljs-comment">//加边</span></span><br><span class="hljs-function"></span>&#123;<br>edge[cnt]=(edg)&#123;head[a],b,w&#125;;<br>head[a]=cnt++;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=head[tmp];j;j=edge[j].next)<span class="hljs-comment">//访问tmp发出的边</span><br></code></pre></td></tr></table></figure><h1 id="拓扑排序">拓扑排序</h1><p>在建边时先预处理入度，即代码中的<code>vin</code></p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> vin[maxn];<span class="hljs-comment">//这个vin</span><br><br>queue&lt;<span class="hljs-type">int</span>&gt;que;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><span class="hljs-keyword">if</span>(!vin[i])<br>que.<span class="hljs-built_in">emplace</span>(i);<br><span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())<br>&#123;<br><span class="hljs-type">int</span> dc=que.<span class="hljs-built_in">front</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=head[dc];j;j=edge[j].next)<br><span class="hljs-keyword">if</span>(!(--vin[edge[j].to]))<br>que.<span class="hljs-built_in">emplace</span>(edge[j].to);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="最短路">最短路</h1><h2 id="floyd">floyd</h2><p>注意到最外层枚举的是<strong>中转点</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> dis[maxn][maxn];<span class="hljs-comment">//dis是邻接矩阵</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;k&lt;=n;k++)<span class="hljs-comment">//k在这里！！</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>        <span class="hljs-keyword">if</span>(dis[i][j]&gt;dis[i][k]+dis[k][j])<br>        &#123;<br>            dis[i][j]=dis[i][k]+dis[k][j];<br>        &#125;<br></code></pre></td></tr></table></figure><h2 id="dijkstra">dijkstra</h2><blockquote><p>论某个傻瓜曾经还在用手写堆</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br><span class="hljs-type">int</span> no,num;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(node y)<span class="hljs-type">const</span><br>&#123;<br><span class="hljs-keyword">return</span> num&gt;y.num;<br>&#125;<br>&#125;;<br><span class="hljs-type">int</span> dis[maxn];<br><span class="hljs-type">bool</span> bl[maxn];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">memset</span>(dis,<span class="hljs-number">0x3f</span>,<span class="hljs-keyword">sizeof</span> dis);<br><span class="hljs-built_in">memset</span>(bl,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> bl);<br>priority_queue&lt;node&gt;que;<br>dis[s]=<span class="hljs-number">0</span>;<br>que.<span class="hljs-built_in">emplace</span>((node)&#123;s,<span class="hljs-number">0</span>&#125;);<br><span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())<br>&#123;<br><span class="hljs-type">int</span> dc=que.<span class="hljs-built_in">top</span>().no;<br>que.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">if</span>(bl[dc])<span class="hljs-keyword">continue</span>;<br>bl[dc]=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-type">int</span> j=head[dc];j;j=edge[j].next)<br><span class="hljs-keyword">if</span>(dis[edge[j].to]&gt;edge[j].w+dis[dc])<br>&#123;<br>dis[edge[j].to]=edge[j].w+dis[dc];<br><span class="hljs-keyword">if</span>(!bl[edge[j].to])que.<span class="hljs-built_in">emplace</span>((node)&#123;edge[j].to,dis[edge[j].to]&#125;);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="spfa-负环判断">spfa+负环判断</h2><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> dis[maxn],tme[maxn];<br><span class="hljs-type">bool</span> bl[maxn];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span><span class="hljs-comment">//返回s出发是否到达负环,可以返回false,代表不合法</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">memset</span>(dis,<span class="hljs-number">0x3f</span>,<span class="hljs-keyword">sizeof</span> dis);<br><span class="hljs-built_in">memset</span>(bl,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> bl);<br><span class="hljs-built_in">memset</span>(tme,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> tme);<br>queue&lt;<span class="hljs-type">int</span>&gt;que;<br>que.<span class="hljs-built_in">emplace</span>(s);<br>bl[s]=<span class="hljs-literal">true</span>;dis[s]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())<br>&#123;<br><span class="hljs-type">int</span> dc=que.<span class="hljs-built_in">front</span>();<br>bl[dc]=<span class="hljs-literal">false</span>;que.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-type">int</span> j=head[dc];j;j=edge[j].next)<br><span class="hljs-keyword">if</span>(dis[edge[j].to]&gt;dis[dc]+edge[j].w)<br>&#123;<br>dis[edge[j].to]=dis[dc]+edge[j].w;<br>tme[edge[j].to]=tme[dc]+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(tme[edge[j].to]&gt;=n)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span>(!bl[edge[j].to])que.<span class="hljs-built_in">emplace</span>(edge[j].to),bl[edge[j].to]=<span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="0-1bfs">0-1bfs</h2><p>很不错的例题:<a href="https://www.luogu.com.cn/problem/P1948">P1948 [USACO08JAN]Telephone Lines S</a></p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-type">bool</span> bl[maxn];<br><span class="hljs-type">int</span> dis[maxn];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs_01</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">memset</span>(dis,<span class="hljs-number">0x3f</span>,<span class="hljs-keyword">sizeof</span> dis);<br><span class="hljs-built_in">memset</span>(bl,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> bl);<br>deque&lt;<span class="hljs-type">int</span>&gt;que;<br>dis[s]=<span class="hljs-number">0</span>;<br>bl[s]=<span class="hljs-literal">true</span>;<br>que.<span class="hljs-built_in">push_back</span>(s);<br><span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())<br>&#123;<br><span class="hljs-type">int</span> dc=que.<span class="hljs-built_in">front</span>();<br>que.<span class="hljs-built_in">pop_front</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-type">int</span> j=head[dc];j;j=edge[j].next)<br>&#123;<br><span class="hljs-keyword">if</span>(dis[edge[j].to]&gt;dis[dc]+edge[j].w)<br>&#123;<br>dis[edge[j].to]=dis[dc]+edge[j].w;<br><span class="hljs-keyword">if</span>(!bl[edge[j].to])<br><span class="hljs-keyword">if</span>(edge[j].w)que.<span class="hljs-built_in">push_back</span>(edge[j].to);<br><span class="hljs-keyword">else</span> que.<span class="hljs-built_in">push_front</span>(edge[j].to);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="关于DAG">关于DAG</h2><p>显然，在DAG中，无论权值是否为负，比一个点拓扑序小的点全松弛完毕后，这个点的最短路就求出来了（因为显然每个点都只能从比自己拓扑序小的点走到）。</p><ul class="lvl-0"><li class="lvl-2">代码几乎和拓扑排序一模一样，不放了。</li></ul><h1 id="联通性">联通性</h1><h2 id="tarjan-有向图缩点">tarjan(有向图缩点)</h2><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> tj,tdfs,bel[maxn],low[maxn],dfn[maxn],sta[maxn],tot;<br><span class="hljs-type">bool</span> insta[maxn],bl[maxn];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-type">int</span> dc)</span></span><br><span class="hljs-function"></span>&#123;<br>sta[++tot]=dc;insta[dc]=bl[dc]=<span class="hljs-literal">true</span>;<br>dfn[dc]=low[dc]=++tdfs;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-type">int</span> j=head[dc];j;j=edge[j].next)<br><span class="hljs-keyword">if</span>(!dfn[edge[j].to])<br>&#123;<span class="hljs-built_in">tarjan</span>(edge[j].to);low[dc]=<span class="hljs-built_in">min</span>(low[dc],low[edge[j].to]);&#125;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">if</span>(insta[edge[j].to])<br>low[dc]=<span class="hljs-built_in">min</span>(low[dc],dfn[edge[j].to]);<br><span class="hljs-keyword">if</span>(low[dc]==dfn[dc])<br>&#123;<br>bel[dc]=++tj;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br>bel[sta[tot]]=tj;<br>insta[sta[tot]]=<span class="hljs-literal">false</span>;<br>tot--;<br><span class="hljs-keyword">if</span>(sta[tot+<span class="hljs-number">1</span>]==dc)<span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note flat info flat&quot;&gt;&lt;p&gt;这里放了最基础的图论内容&lt;br&gt;
在本文中&lt;code&gt;maxn&lt;/code&gt;为最大点数，&lt;code&gt;maxm&lt;/code&gt;为最大边数.&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;链式前向星&quot;&gt;链式前向星&lt;/h1&gt;</summary>
      
    
    
    
    <category term="信息学" scheme="https://www.felixesintot.top/categories/%E4%BF%A1%E6%81%AF%E5%AD%A6/"/>
    
    <category term="笔记" scheme="https://www.felixesintot.top/categories/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="图论" scheme="https://www.felixesintot.top/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>2022NOIP游记</title>
    <link href="https://www.felixesintot.top/2022/11/26/2022noip-you-ji/"/>
    <id>https://www.felixesintot.top/2022/11/26/2022noip-you-ji/</id>
    <published>2022-11-26T11:49:56.000Z</published>
    <updated>2023-01-09T14:09:25.760Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DAY-1">DAY -1</h1><p>请了一整个下午的假去试机，结果忘了加用准考证号命名的文件夹，直接把程序放在了E盘。<br>吓死了，辛好是试机。</p><h1 id="DAY-0">DAY 0</h1><p>今天去比赛……</p><ul class="lvl-0"><li class="lvl-2">T1:看起来是很水的DP，期望<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>100</mn></mrow><annotation encoding="application/x-tex">100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">100</span></span></span></span>。</li><li class="lvl-2">T2:完了，太难了，连模拟都不会，交了样例，期望<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>（有分就恐怖了）。</li><li class="lvl-2">T3:除了暴力什么都没想出来，打了一条链+<strong>纯</strong>暴力（对，就是前3个点），期望<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>25</mn></mrow><annotation encoding="application/x-tex">25</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">25</span></span></span></span>。</li><li class="lvl-2">T4:发现纯暴力加上st表一点用都没有，索性暴力到底，期望<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>8</mn></mrow><annotation encoding="application/x-tex">8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">8</span></span></span></span>分（似乎多组数据还忘了换行，寄）。</li></ul><h1 id="DAY-1-2">DAY 1</h1><p>结果呢，寄了<br>还是寄在T1上<br>只得了<strong>1</strong>分，像开玩笑</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>1</mn><mo>+</mo><mn>0</mn><mo>+</mo><mn>25</mn><mo>+</mo><mn>8</mn><mo>=</mo><mn>34</mn></mrow><annotation encoding="application/x-tex">1+0+25+8=34</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">25</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">34</span></span></span></span></span></p><p>几乎是被白罚坐了一早上。<br>菜死了😢</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;DAY-1&quot;&gt;DAY -1&lt;/h1&gt;
&lt;p&gt;请了一整个下午的假去试机，结果忘了加用准考证号命名的文件夹，直接把程序放在了E盘。&lt;br&gt;
吓死了，辛好是试机。&lt;/p&gt;
&lt;h1 id=&quot;DAY-0&quot;&gt;DAY 0&lt;/h1&gt;
&lt;p&gt;今天去比赛……&lt;/p&gt;
&lt;ul clas</summary>
      
    
    
    
    <category term="信息学" scheme="https://www.felixesintot.top/categories/%E4%BF%A1%E6%81%AF%E5%AD%A6/"/>
    
    <category term="比赛记录" scheme="https://www.felixesintot.top/categories/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%AF%94%E8%B5%9B%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="动态" scheme="https://www.felixesintot.top/tags/%E5%8A%A8%E6%80%81/"/>
    
  </entry>
  
</feed>
